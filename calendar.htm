<!DOCTYPE html>
<html lang="en">
<head>
	<title>Reservation calendar</title>
	<link rel="stylesheet" type="text/css" href="stylesheet.css" />
	<script type="text/javascript" src="jquery-1.11.2.js"></script>
	<script type="text/javascript">

		//global variables
		//records current display date
		var theDate = new Date();
		//Holds scheduled appointments
		var appointments = new AppointmentBook();
		//records currently selected date
		var selectedDate = null;

	//object  constructors
		function AppointmentBook()
		//constructor for AppointmentBook object
		{
			AppointmentBook.prototype.addAppointment = function(appt)
			{
				var resDate = appt.getApptDate();
				if (this[resDate] == undefined)
				{
					this[resDate] = new Array();
					this[resDate][this[resDate].length] = appt;
				}
				else
				{
					this[resDate][this[resDate].length] = appt;
				}
			}
			AppointmentBook.prototype.getAppointments = function(aDate)
			//if appointments exist for a supllied date, returns an array of Appointments
			//otherwise returns null
			{
				var resDate = (aDate.getMonth() + "-" + aDate.getDate())
				if (this[resDate] == undefined)
				{
					return null;
				}
				else
				{
					return this[resDate];
				}
			}
		}

		function Appointment(aName, aDate)
		//constructor for appointment object
		{
			//object to hold appointment information
			this.aptName = aName;
			this.aptMonth = aDate.getMonth();
			this.aptDate = aDate.getDate();

			Appointment.prototype.getApptDate = function()
			{
				return (this.aptMonth + "-" + this.aptDate);
			}

			Appointment.prototype.getApptName = function()
			{
				return this.aptName;
			}
		}

		function CalendarDate(aDate)
		//Calendar date object constructor
		{

			this.selfDate = new Date(aDate.getFullYear(), aDate.getMonth(), aDate.getDate());
			var cBox = document.createElement("div");
			cBox.appendChild(document.createTextNode(aDate.getDate()));

			if (appointments.getAppointments(aDate) != null)
			{
				cBox.appendChild(document.createTextNode("Appts."));
			}

			this.displayElement = cBox;

			this.displayElement.addEventListener("click", this, false)

			CalendarDate.prototype.click = function(e)
			{
				//function to initialize creation of a reservation
				selectedDate = this.selfDate;
				showDateInfo(selectedDate);
			}

			CalendarDate.prototype.handleEvent = function(e)
			{
				switch (e.type)
				{
					case "click": this.click(e);
				}
			}

			CalendarDate.prototype.getSelfDate = function()
			{
				return this.selfDate;
			}
		}

	//calendar utility functions
		function getRows(currentDate)
		//return the number of calendar rows in the month for the date supplied
		{
			
			var startOfMonth = firstDayOfMonth(currentDate);
			var numDaysInMonth = getDaysInMonth(currentDate);

			if (currentDate.getMonth() == 1 && startOfMonth == 0 && numDaysInMonth == 28)
			{
				return 4;
			}

			if((startOfMonth == 6 && numDaysInMonth >= 30) || (startOfMonth == 5 && numDaysInMonth == 31))
			{
				return 6;
			}

			return 5;
		}

		function getDaysInMonth(aDate)
		//finds number of days in month
		{
			var today = aDate.getDate();
			aDate.setDate(1);
			aDate.setMonth(aDate.getMonth() + 1);
			aDate.setDate(aDate.getDate() - 1);
			var daysInMonth = aDate.getDate();
			aDate.setDate(today);
			return daysInMonth;
		}

		function firstDayOfMonth(aDate)
		//returns the day value for the first day of the month for a supplied date
		{
			var today = aDate.getDate();
			aDate.setDate(1);
			var firstOfMonth = aDate.getDay();
			aDate.setDate(today);
			return firstOfMonth;
		}

		function monthToString(monthNum)
		//takes an integer and returns string of month name
		{
			switch (monthNum)
			{
				case 0:
				return "January";
				case 1:
				return "February";
				case 2:
				return "March";
				case 3:
				return "April";
				case 4:
				return "May";
				case 5:
				return "June";
				case 6:
				return "July";
				case 7:
				return "August";
				case 8:
				return "September";
				case 9:
				return "October";
				case 10:
				return "November";
				case 11:
				return "December";
			}
		}
		
		function arrowRight_onclick()
		{
			nextMonth();
		}

		function arrowLeft_onclick()
		{
			previousMonth();
		}

		function arrowRightWeek_onclick()
		{
			//increase the week by 1
			theDate.setDate(theDate.getDate() + 7);
			buildDisplay();
		}

		function arrowLeftWeek_onclick()
		{
			//decrease week by 1
			theDate.setDate(theDate.getDate() - 7);
			buildDisplay();
		}

		function appointmentName_onEnter(e)
		{
			if (e.keyCode == 13)
			{
				makeAppointment();
			}
		}

		function nextMonth()
		{	
			theDate.setMonth(theDate.getMonth() + 1);
			theDate.setDate(1);
			buildDisplay();
			
		}

		function previousMonth()
		{
			theDate.setMonth(theDate.getMonth() - 1);
			theDate.setDate(1);
			buildDisplay();
		}

		function displayCalendar(aDate)
		//builds a calendar from the supplied date
		{

			//temporary date object to build calendar
			var workingDate = new Date(aDate.getFullYear(), aDate.getMonth(), aDate.getDate());
			//sets date to first day of week
			workingDate.setDate(workingDate.getDate() - workingDate.getDay());

			//builds calendar display
			for (var r = 0; r < 5; r++)
			{
				var rowDiv = document.createElement("div");

				for (var d = 0; d < 7 /*days in week */; d++)
				{
					var displayBox = new CalendarDate(workingDate);

					if(workingDate.getMonth() != theDate.getMonth())
					{
						displayBox.displayElement.className = "otherMonthDate";
					}
					else
					{
						displayBox.displayElement.className = "thisMonthDate";
					}

					rowDiv.appendChild(displayBox.displayElement);
					workingDate.setDate(workingDate.getDate() + 1);
				}
				document.getElementById("calendarDisplay").appendChild(rowDiv);
			}

		}
	
	//Appointment functions
		function openAppointmentWindow()
		//Open appointment form window
		{
			if (selectedDate == null)
			{
				alert("Please select a date first.");
			}
			else
			{
				$("#appointmentWindow").fadeIn(500);
				$("#appointmentName").focus().val("");
			}
		}

		function makeAppointment()
		//makes new appointment and adds it to appointment book(appointments)
		{
			var apptName = document.getElementById("appointmentName").value;
			if (apptName == "")
			{
				alert("Please enter a name.");
			}
			else
			{
				var newAppt = new Appointment(apptName, selectedDate);
				appointments.addAppointment(newAppt);
				$("#appointmentWindow").fadeOut(300);
				buildDisplay();
				showDateInfo(selectedDate);
			}
		}

	//Display functions
		function showDateInfo(aDate)
		//shows reservations and info for selected date
		{
			//display date string
			document.getElementById("interactionText").innerHTML = (monthToString(aDate.getMonth()) + ", " + aDate.getDate() + " " + aDate.getFullYear());
			var dayAppointments = appointments.getAppointments(aDate);
			var dateViewBox = document.getElementById("dateView");

			//show reservations list detail
			dateViewBox.innerHTML = "";
			if (dayAppointments == null)
			{
				dateViewBox.appendChild(document.createTextNode("No appointments for this day."));
			}
			else
			//build list of existing appointments
			{
				var listOfAppts = document.createElement("ul");

				for (var a = 0; a < dayAppointments.length; a++)
				{
					var apptName = dayAppointments[a].getApptName();
					var liElem = document.createElement("li");
					liElem.appendChild(document.createTextNode(apptName));
					listOfAppts.appendChild(liElem);
					dateViewBox.appendChild(listOfAppts);
				}
			
			}
		}

		function showReservationsList(aDate)
		//show reservations list for supplied date in dateView window
		{
			
		}
	
		function buildDisplay()
		{
			document.getElementById("calendarDisplay").innerHTML = "";
			displayCalendar(theDate);
			var dateString = monthToString(theDate.getMonth()) + ", " + theDate.getFullYear();
			document.getElementById("headerInfo").innerHTML = dateString;
		}


		function window_onload()
		//initalization code
		{
			theDate.setDate(1);
			buildDisplay();

		}


	</script>
</head>
<body onload="window_onload()" >
	<div id="widgetWindow">
		<div id="calendar">
			<div id="calendarHeader">
				<div id="calendarNavigation">
					<img id="leftArrow" src="leftArrow.png" class="arrowButton" onclick="arrowLeft_onclick()"/>
					<img it="leftArrowWeek" src="leftArrow.png" class="arrowButton" onclick="arrowLeftWeek_onclick()" />
					<h2 id="headerInfo"></h2>
					<img id="rightArrowWeek" src="rightArrow.png" class="arrowButton" onclick="arrowRightWeek_onclick()" />
					<img id="rightArrow" src="rightArrow.png" class="arrowButton" onclick="arrowRight_onclick()" />
				</div>
				<div id="dayOfWeekDisplay">
					<div class="dayDisplay">Sunday</div>
					<div class="dayDisplay">Monday</div>
					<div class="dayDisplay">Tuesday</div>
					<div class="dayDisplay">Wednesday</div>
					<div class="dayDisplay">Thursday</div>
					<div class="dayDisplay">Friday</div>
					<div class="dayDisplay">Saturday</div>
				</div>
			</div>
			<div id="calendarDisplay">
			</div>
		</div>
		<div id="interactionWindow">
			<h1 id="interactionText">Select a Date.</h1>
			<div id="dateView" style="overflow:auto"></div>
			<input type="button" value="New Appointment" onclick="openAppointmentWindow()" style="margin-left:30px"/>
		</div>
		<div id="appointmentWindow">
		<form id="appointmentForm">
			<label>Your Name: <input type="text" id="appointmentName" onkeypress="appointmentName_onEnter()"/> </label>
			<input type="button" value="Make Appointment" onclick="makeAppointment()"/>
		</form>
	</div>
	</div>
</body>
</html>